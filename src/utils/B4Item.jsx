import transliterate from "./transliterate";
import PathConfigs from "../config/PathConfigs";
import locationTerms from "../config/locationTerms";
import measureText from "./measureText";
import RouteBadgeGroup, {
  getRouteBadgeGroupWidth,
} from "../components/svg/RouteBadgeGroup";

// === [0] –ö–û–ù–°–¢–ê–ù–¢–ò –®–†–ò–§–¢–£ –¢–ê –ü–†–û–ü–û–†–¶–Ü–ô ===
const BASE_FONT_SIZE_PRIMARY = 38;
const BASE_FONT_SIZE_SECONDARY = 20;
const FONT_VISUAL_HEIGHT_COEFF = 96 / 76;
const DIAGONAL_ARROW_WIDTH = 65.4;

// === [1] –ê–î–ê–ü–¢–ò–í–ù–ï –ó–ú–ï–ù–®–ï–ù–ù–Ø –®–†–ò–§–¢–£, —è–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ –≤–ª–∞–∑–∏—Ç—å —É –¥–æ—Å—Ç—É–ø–Ω—É —à–∏—Ä–∏–Ω—É ===
function scaleFontToFit(text, font, maxWidth, baseSize, minRatio = 0.8) {
  const measured = measureText(text, font);
  if (measured.width <= maxWidth) return { size: baseSize, ratio: 1 };
  const scaleRatio = maxWidth / measured.width;
  const clampedRatio = Math.max(scaleRatio, minRatio);
  return { size: baseSize * clampedRatio, ratio: clampedRatio };
}

// === [2] –†–û–ó–ë–ò–¢–¢–Ø –î–û–í–ì–û–ì–û –¢–ï–ö–°–¢–£ –ù–ê –î–í–ê –†–Ø–î–ö–ò (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ) ===
function splitText(text) {
  const words = text.split(" ");
  if (words.length < 2) return [text];
  const half = Math.ceil(words.length / 2);
  return [words.slice(0, half).join(" "), words.slice(half).join(" ")];
}

// === [3] –û–°–ù–û–í–ù–ò–ô SVG-–ö–û–ú–ü–û–ù–ï–ù–¢ –ï–õ–ï–ú–ï–ù–¢–ê B4 ===
function B4Item({ params, x = 0, y = 0, transform, isLast = false, index = 0 }) {
  // === [3.1] –ü–†–û–í–Ü–†–ö–ò –°–ü–ï–¶–ò–§–Ü–ß–ù–ò–• –£–ú–û–í ===
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∂–æ–≤—Ç–∏–π —Ñ–æ–Ω –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
  const shouldShowTemporaryBg = params.isTemporaryRoute === true;
  const TEMP_COLOR = "#F5C30D";

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É (–ø–µ—Ä—à–∏–π –ø—É–Ω–∫—Ç –∑ –Ω–∞–ø—Ä—è–º–∫–æ–º "end")
  const isEndRoute = params.direction === "end" && index === 0;

  // === [3.2] –§–û–†–ú–£–í–ê–ù–ù–Ø –¢–ï–ö–°–¢–û–í–ò–• –ú–Ü–¢–ö–ò ===
  // –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á –æ—Å–Ω–æ–≤–Ω–æ—ó –º—ñ—Ç–∫–∏ —Ç–∞ –ø—ñ–¥—Ä—è–¥–∫–∞
  const mainKey = params.mainText;
  const subText = params.subText || "";

  // –¢—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ä—è–¥–∫–∞ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º—ñ—Ç–∫–∏
  const translit = subText ? transliterate(subText) : "";

  // –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ–∫—Å—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
  let labelUa = "";
  let labelEn = "";

  // –Ø–∫—â–æ —ñ–∫–æ–Ω–∫–∞ ‚Äî "other", –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—ñ –Ω–∞–∑–≤–∏
  if (params.icon === "other") {
    labelUa = params.customUa || "";
    labelEn = params.customEn || "";
  }
  // –Ü–Ω–∞–∫—à–µ ‚Äî –±–µ—Ä–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –Ω–∞–∑–≤–∏ –∑ locationTerms
  else if (params.icon && mainKey && locationTerms[params.icon]?.[mainKey]) {
    const entry = locationTerms[params.icon][mainKey];
    labelUa = entry.ua ?? "";
    labelEn = entry.en ?? "";
  }

  // === [3.3] –°–ö–õ–ê–î–ê–ù–ù–Ø –¢–ï–ö–°–¢–û–í–ò–• –†–Ø–î–ö–Ü–í ===
  // üîπ –ì–æ–ª–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞ + subText
  const mainTextLineRaw = labelUa ? `${labelUa} ${subText}`.trim() : subText;

  // üîπ –î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π): —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è + EN
  let secondaryLine = "";
  if (params.icon === "bicycleRoute") {
    // –Ø–∫—â–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –¥–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä
    const number = params.routeNumber ? ` ${params.routeNumber}` : "";
    secondaryLine = [translit, labelEn].filter(Boolean).join(" ") + number;
  } else {
    secondaryLine = [translit, labelEn].filter(Boolean).join(" ");
  }

  // === [3.4] –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –Ü–ö–û–ù–ö–ò –ó –ö–û–ù–§–Ü–ì–Ü–í ===
  let iconKey = params.icon;

  // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞: —è–∫—â–æ "streetNetwork" —Ç–∞ "isUrbanCenter", —Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ "cityCentre"
  if (iconKey === "streetNetwork" && params.isUrbanCenter) {
    iconKey = "cityCentre";
  }

  // –Ø–∫—â–æ —ñ–∫–æ–Ω–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –ø—Ä–æ–±—É—î–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑ —Ç–∏–ø—É –Ω–æ–º–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç—É
  if (!iconKey) {
    switch (params.numberType) {
      case "veloSTO":
      case "veloParking":
      case "eurovelo":
        iconKey = params.numberType;
        break;
    }
  }

  const icon = iconKey && PathConfigs[iconKey];

  // === [3.5] –õ–ï–Ø–£–¢: –ö–û–û–†–î–ò–ù–ê–¢–ò –°–¢–†–Ü–õ–û–ö, –Ü–ö–û–ù–û–ö, –¢–ï–ö–°–¢–£ ===
  const xPadding = 40;
  const arrow = PathConfigs.smallArrow;

  // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤
  const directionLayout = {
    left: {
      rotation: -90,
      arrowX: xPadding + (arrow.height - arrow.width) / 2,
      iconX: xPadding + arrow.height + 20,
    },
    straight: {
      rotation: 0,
      arrowX: xPadding,
      iconX: xPadding + arrow.width + 20,
    },
    "straight-left": {
      rotation: -45,
      arrowX: xPadding - 3,
      iconX: xPadding + DIAGONAL_ARROW_WIDTH + 20,
    },
    right: {
      rotation: 90,
      arrowX: 560 - arrow.width - (arrow.height - arrow.width) / 2,
      iconX: xPadding,
    },
    "straight-right": {
      rotation: 45,
      arrowX: 560 + 3 - arrow.width,
      iconX: xPadding,
    },
  };

  const layout = directionLayout[params.direction] || {};
  const rotation = layout.rotation || 0;
  const arrowX = layout.arrowX || 0;
  const iconX = layout.iconX || xPadding;
  const arrowY = 75 - arrow.height / 2;

  // === [3.6] –û–ë–ß–ò–°–õ–ï–ù–ù–Ø textX ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É —Ç–µ–∫—Å—Ç—É ===
  let textX = xPadding;

  // –î–æ–¥–∞—î–º–æ —à–∏—Ä–∏–Ω—É —Å—Ç—Ä—ñ–ª–∫–∏ (—è–∫—â–æ –≤–æ–Ω–∞ –∑–ª—ñ–≤–∞)
  if (["left", "straight", "straight-left"].includes(params.direction)) {
    const arrowVisualWidth = {
      straight: arrow.width,
      left: arrow.height,
      "straight-left": DIAGONAL_ARROW_WIDTH,
    }[params.direction] || 0;

    textX = arrowX + arrowVisualWidth + 20;
  }

  // –î–æ–¥–∞—î–º–æ —à–∏—Ä–∏–Ω—É —ñ–∫–æ–Ω–∫–∏
  if (icon) {
    textX += icon.width * icon.scale + 20;
  }

  // === [3.7] –î–û–°–¢–£–ü–ù–ê –®–ò–†–ò–ù–ê –¢–ï–ö–°–¢–û–í–û–ì–û –ë–õ–û–ö–£ ===
  const baseFontSize1 = BASE_FONT_SIZE_PRIMARY / 0.7;
  const baseFontSize2 = BASE_FONT_SIZE_SECONDARY / 0.7;

  const arrowRightSpace = ["right", "straight-right"].includes(params.direction)
    ? (params.direction === "right" ? arrow.height : DIAGONAL_ARROW_WIDTH) + 20
    : 0;

  const badgeGroupWidth = getRouteBadgeGroupWidth(params);

  const availableTextWidthMain =
    520 - (textX - xPadding) - arrowRightSpace - badgeGroupWidth;

  const availableTextWidthSecondary =
    520 - (textX - xPadding) - arrowRightSpace;

  // === [3.8] –ê–î–ê–ü–¢–ò–í–ù–ò–ô –†–û–ó–ú–Ü–† –®–†–ò–§–¢–£, –ú–û–ñ–õ–ò–í–ò–ô –ü–ï–†–ï–ù–û–° –ù–ê 2 –†–Ø–î–ö–ò ===
  let mainTextLines;
  let fontSize1;

  const { ratio: singleLineRatio } = scaleFontToFit(
    mainTextLineRaw,
    "54px RoadUA-Medium",
    availableTextWidthMain,
    baseFontSize1,
    0
  );

  if (singleLineRatio >= 0.8) {
    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –≤–º—ñ—â—É—î—Ç—å—Å—è –≤ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ ‚Äî –ª–∏—à–∞—î–º–æ —Ç–∞–∫
    mainTextLines = [mainTextLineRaw];
    fontSize1 = baseFontSize1 * Math.min(singleLineRatio, 1);
  } else {
    // –Ü–Ω–∞–∫—à–µ —Ä–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –¥–≤–∞ —Ä—è–¥–∫–∏, –ø—ñ–¥–≥–∞–Ω—è—î–º–æ —à—Ä–∏—Ñ—Ç
    mainTextLines = splitText(mainTextLineRaw);
    const adjustedRatio = Math.min(
      scaleFontToFit(
        mainTextLines[0],
        "54px RoadUA-Medium",
        availableTextWidthMain,
        baseFontSize1,
        0
      ).ratio,
      scaleFontToFit(
        mainTextLines[1],
        "54px RoadUA-Medium",
        availableTextWidthMain,
        baseFontSize1,
        0
      ).ratio
    );
    fontSize1 = baseFontSize1 * Math.min(0.8, Math.max(adjustedRatio, 0.7));
  }

  const { size: fontSize2 } = scaleFontToFit(
    secondaryLine,
    "28px RoadUA-Medium",
    availableTextWidthSecondary,
    baseFontSize2
  );

  // === [3.9] –î–û–î–ê–¢–ö–û–í–Ü –û–ë–ß–ò–°–õ–ï–ù–ù–Ø: —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É, –±–µ–π–¥–∂, —Ö–≤–∏–ª—ñ ===
  const measuredLines = mainTextLines.map((line) =>
    measureText(line, `${fontSize1}px RoadUA-Medium`)
  );
  const maxTextWidth = Math.max(...measuredLines.map((m) => m.width));
  const routeBadgeX = textX + maxTextWidth + 20;

  const showWave = params.icon === "water";
  const waves = PathConfigs.waves;
  const waveWidth = waves.width * waves.scale;
  const waveAreaWidth = Math.min(maxTextWidth, availableTextWidthMain);
  const waveCount = showWave ? Math.floor(waveAreaWidth / waveWidth) : 0;

  const yShiftText = fontSize1 * 0.7 * FONT_VISUAL_HEIGHT_COEFF - fontSize1 * 0.7;
  const applyYShift = showWave ? yShiftText : 0;

  // === [4] –†–ï–ù–î–ï–† SVG ===
  return (
    <g transform={transform || `translate(${x}, ${y})`}>
      {/* === [4.1] –¢–∏–º—á–∞—Å–æ–≤–∏–π –∂–æ–≤—Ç–∏–π —Ñ–æ–Ω === */}
      {shouldShowTemporaryBg &&
        (isLast ? (
          <path
            d={PathConfigs.temporaryRouteFooterBg.d}
            fill={TEMP_COLOR}
            fillRule="evenodd"
          />
        ) : (
          <rect x={10} y={0} width={580} height={150} fill={TEMP_COLOR} />
        ))}

      {/* === [4.2] –°—Ç—Ä—ñ—á–∫–∞ "–∫—ñ–Ω–µ—Ü—å –º–∞—Ä—à—Ä—É—Ç—É" (—á–µ—Ä–≤–æ–Ω–∞) === */}
      {isEndRoute && (
        <g
          transform={`translate(${params.b4Items?.length === 1 ? 31 : 0}, ${
            params.b4Items?.length === 1 ? -10 : 0
          }) scale(1)`}
        >
          <path d={PathConfigs.stripeBig.d} fill="#CC0000" fillRule="evenodd" />
        </g>
      )}

      {/* === [4.3] –û—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (1 –∞–±–æ 2 —Ä—è–¥–∫–∏ + –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞ –Ω–∞–∑–≤–∞) === */}
      {mainTextLines.length === 1 ? (
        <text>
          <tspan
            x={textX}
            y={35 + fontSize1 * 0.7 - applyYShift}
            fontSize={fontSize1}
            fontFamily="RoadUA-Medium"
          >
            {mainTextLines[0]}
          </tspan>
          <tspan
            x={textX}
            y={115 - (20 * FONT_VISUAL_HEIGHT_COEFF - 20) - applyYShift}
            fontSize={fontSize2}
            fontFamily="RoadUA-Medium"
          >
            {secondaryLine}
          </tspan>
        </text>
      ) : (
        <text x={textX} fontFamily="RoadUA-Medium">
          <tspan x={textX} y={35} dominantBaseline="middle" fontSize={fontSize1}>
            {mainTextLines[0]}
          </tspan>
          <tspan x={textX} y={75 + fontSize1 * 0.35} fontSize={fontSize1}>
            {mainTextLines[1]}
          </tspan>
          <tspan x={textX} y={115} dominantBaseline="middle" fontSize={fontSize2}>
            {secondaryLine}
          </tspan>
        </text>
      )}

      {/* === [4.4] –°—Ç—Ä—ñ–ª–∫–∞ –Ω–∞–ø—Ä—è–º–∫—É (–æ–∫—Ä—ñ–º "end") === */}
      {params.direction !== "end" && !params.hideArrow && (
        <g
          transform={`translate(${arrowX}, ${arrowY}) rotate(${rotation} ${
            arrow.width / 2
          } ${arrow.height / 2}) scale(${arrow.scale})`}
        >
          <path d={arrow.d} fill="black" />
        </g>
      )}

      {/* === [4.5] –Ü–∫–æ–Ω–∫–∞ —Ç–∏–ø—É –º–∞—Ä—à—Ä—É—Ç—É (—è–∫—â–æ —î) === */}
      {icon && (
        <g
          transform={`translate(${iconX}, ${
            75 - (icon.height * icon.scale) / 2
          }) scale(${icon.scale})`}
        >
          <path d={icon.d} fill="#000000" fillRule="evenodd" />
        </g>
      )}

      {/* === [4.6] –•–≤–∏–ª—å–∫–∏ –¥–ª—è –≤–æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É === */}
      {showWave && (
        <g transform={`translate(${textX}, 108)`}>
          {Array.from({ length: waveCount }).map((_, i) => (
            <path
              key={i}
              d={waves.d}
              transform={`translate(${i * waveWidth}, 0) scale(${waves.scale})`}
              fill="#005187"
            />
          ))}
        </g>
      )}

      {/* === [4.7] –ì—Ä—É–ø–∞ –±–µ–π–¥–∂—ñ–≤ –º–∞—Ä—à—Ä—É—Ç—É === */}
      <RouteBadgeGroup params={{ 
        ...params, 
        isTerminus: isEndRoute, 
        isTemporaryRoute: shouldShowTemporaryBg }} 
        x={routeBadgeX} 
        y={35} />

    </g>
  );
}

export default B4Item;
